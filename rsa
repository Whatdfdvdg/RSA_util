   
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
   
import javax.crypto.Cipher;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.SecureRandom;

/**
 * RSAUtil
 *
 * @author Xin Lijie
 * @date 16-7-14
 */
public class RSAUtil {

    /** 指定加密算法为DESede */
    private static String ALGORITHM = "RSA";
    /** 指定key的大小 */
    private static int KEYSIZE = 1024;
    /** 指定公钥存放文件 */
    private static String PUBLIC_KEY_FILE = "PublicKey";
    /** 指定私钥存放文件 */
    private static String PRIVATE_KEY_FILE = "PrivateKey";
    static {

    }
    private static void generateKeyPair() throws Exception{
        /** RSA算法要求有一个可信任的随机数源 */
        SecureRandom sr = new SecureRandom();
        /** 为RSA算法创建一个KeyPairGenerator对象 */
        KeyPairGenerator kpg = KeyPairGenerator.getInstance(ALGORITHM);
        /** 利用上面的随机数据源初始化这个KeyPairGenerator对象 */
        kpg.initialize(KEYSIZE, sr);
        /** 生成密匙对 */
        KeyPair kp = kpg.generateKeyPair();
        /** 得到公钥 */
        Key publicKey = kp.getPublic();
        /** 得到私钥 */
        Key privateKey = kp.getPrivate();
        System.out.println("public key format: " + publicKey.getFormat());
        System.out.println("private key: " + privateKey);
        /** 用对象流将生成的密钥写入文件 */
        ObjectOutputStream oos1 = new ObjectOutputStream(new FileOutputStream(PUBLIC_KEY_FILE));
        ObjectOutputStream oos2 = new ObjectOutputStream(new FileOutputStream(PRIVATE_KEY_FILE));
        oos1.writeObject(publicKey);
        oos2.writeObject(privateKey);
        /** 清空缓存，关闭文件输出流 */
        oos1.close();
        oos2.close();
    }

    /**
     * 解密算法
     * cryptograph:密文
     */
    public static String decrypt(String ciperText) throws Exception{
        /** 将文件中的私钥对象读出 */
        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(PRIVATE_KEY_FILE));
        Key key = (Key) ois.readObject();
        /** 得到Cipher对象对已用公钥加密的数据进行RSA解密 */
        Cipher cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.DECRYPT_MODE, key);
        BASE64Decoder decoder = new BASE64Decoder();
        byte[] b1 = decoder.decodeBuffer(ciperText);
        /** 执行解密操作 */
        byte[] b = cipher.doFinal(b1);
        return new String(b);
    }

    /**
     * 加密方法
     * source： 源数据
     */
    public static String encrypt(String plainText) throws Exception{
        /** 将文件中的公钥对象读出 */
        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(PUBLIC_KEY_FILE));
        Key key = (Key) ois.readObject();
        ois.close();
        /** 得到Cipher对象来实现对源数据的RSA加密 */
        Cipher cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.ENCRYPT_MODE, key);
        byte[] b = plainText.getBytes();
        /** 执行加密操作 */
        byte[] b1 = cipher.doFinal(b);
        BASE64Encoder encoder = new BASE64Encoder();
        return encoder.encode(b1);
    }

    public static void main(String[] args) throws Exception {
        RSAUtil.generateKeyPair();
        System.out.println("加密后" + RSAUtil.encrypt("ssss"));
        System.out.println("解密后" + RSAUtil.decrypt(RSAUtil.encrypt("ssss")));
    }

}


获得密钥根据Base64加密后的String

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

import javax.crypto.Cipher;
import java.io.IOException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

/**
 * RSAUtil
 *
 * @author Xin Lijie
 * @date 16-7-14
 */
public class RSAUtil {
    private static final Logger LOGGER = LoggerFactory.getLogger(RSAUtil.class);
    /**
     * 指定加密算法为rsa
     */
    private static String ALGORITHM = "RSA";
    /**
     * 指定key的大小
     */
    private static int KEYSIZE = 1024;
    /**
     * 公钥
     */
    public static final Key publicKey;
    /**
     * 私钥
     */
    public static final Key privateKey;

    private String publicKeyStr;

    private String privateKeyStr;

    static {
        /** RSA算法要求有一个可信任的随机数源 */
        SecureRandom sr = new SecureRandom();
        /** 为RSA算法创建一个KeyPairGenerator对象 */
        KeyPairGenerator kpg = null;
        try {
            kpg = KeyPairGenerator.getInstance(ALGORITHM);
        } catch (NoSuchAlgorithmException e) {
            //ignore
        }
        /** 利用上面的随机数据源初始化这个KeyPairGenerator对象 */
        kpg.initialize(KEYSIZE, sr);
        /** 生成密匙对 */
        KeyPair kp = kpg.generateKeyPair();
        /** 得到公钥 */
        publicKey = kp.getPublic();
        /** 得到私钥 */
        privateKey = kp.getPrivate();
    }

    /**
     * 解密
     *
     * @param ciperText 密文
     * @return 明文
     */
    public static String decrypt(String ciperText) {
        try {
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            cipher.init(Cipher.DECRYPT_MODE, privateKey);
            BASE64Decoder decoder = new BASE64Decoder();
            byte[] b1 = decoder.decodeBuffer(ciperText);
            /** 执行解密操作 */
            byte[] b = cipher.doFinal(b1);
            return new String(b);
        } catch (Exception e) {
            LOGGER.error("解密出错,密文为: {}", ciperText, e);
        }
        return null;
    }

    /**
     * 加密
     *
     * @param plainText 明文
     * @return 密文
     */
    public static String encrypt(String plainText) {
        try {
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            cipher.init(Cipher.ENCRYPT_MODE, publicKey);
            byte[] b = plainText.getBytes();
            /** 执行加密操作 */
            byte[] b1 = cipher.doFinal(b);
            BASE64Encoder encoder = new BASE64Encoder();
            return encoder.encode(b1).replaceAll("\r|\n", "");
        } catch (Exception e) {
            LOGGER.error("加密出错,明文为: {}", plainText, e);
        }
        return null;
    }

    private static Key[] generateKey(String priKey, String pubKey) throws IOException, InvalidKeySpecException, NoSuchAlgorithmException {
        PKCS8EncodedKeySpec priSpec = new PKCS8EncodedKeySpec(new BASE64Decoder().decodeBuffer(priKey));
        X509EncodedKeySpec pubSpec = new X509EncodedKeySpec(new BASE64Decoder().decodeBuffer(pubKey));
        KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM);
        PrivateKey privateKey = keyFactory.generatePrivate(priSpec);
        PublicKey publicKey = keyFactory.generatePublic(pubSpec);
        Key[] keys = {privateKey, publicKey};
        return keys;
    }

    public static String genKeyStr(Key key) {
        return new BASE64Encoder().encode(key.getEncoded());
    }

    public static void main(String[] args) throws InvalidKeySpecException, NoSuchAlgorithmException, IOException {
        System.out.println("private key original: " + RSAUtil.privateKey);
        System.out.println("public key original: " + RSAUtil.publicKey);
        String priKeyStr = genKeyStr(RSAUtil.privateKey);
        String pubKeyStr = genKeyStr(RSAUtil.publicKey);
        System.out.println("pri key str: " + priKeyStr);
        System.out.println("pub key str: "+ pubKeyStr);
        Key[] keys = RSAUtil.generateKey(priKeyStr, pubKeyStr);
        System.out.println("str gen prikey: " + keys[0]);
        System.out.println("str gen pubkey: " + keys[1]);

    }


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

import javax.crypto.Cipher;
import java.io.IOException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

/**
 * RSAUtil
 *
 * @author Xin Lijie
 * @date 16-7-14
 */
public class RSAUtil {
    private static final Logger LOGGER = LoggerFactory.getLogger(RSAUtil.class);
    /**
     * 指定加密算法为rsa
     */
    private static String ALGORITHM = "RSA";
    /**
     * 指定key的大小
     */
    private static int KEYSIZE = 1024;
    /**
     * 公钥
     */
    private static final Key publicKey;
    /**
     * 私钥
     */
    private static final Key privateKey;

    private static final String publicKeyStr = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCJ0L0DL9BcSK0HqJNXjBYWo9U86JBHtUYWcIiA\n" +
            "UnA4VxQikaMASQr9pPm0hhrZVLq5NXizJwnAro2hQsGGbO9NdrRHxTgRL9zkkEcEDXkKWvYscNRJ\n" +
            "iQlXMeWaGC16eVNVzvTZUrlbQJ52uwAHOJaJTAPl+DT9+wxQMxK1eT80ZwIDAQAB";

    private static final String privateKeyStr = "MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBAInQvQMv0FxIrQeok1eMFhaj1Tzo\n" +
            "kEe1RhZwiIBScDhXFCKRowBJCv2k+bSGGtlUurk1eLMnCcCujaFCwYZs7012tEfFOBEv3OSQRwQN\n" +
            "eQpa9ixw1EmJCVcx5ZoYLXp5U1XO9NlSuVtAnna7AAc4lolMA+X4NP37DFAzErV5PzRnAgMBAAEC\n" +
            "gYEAggUjLcyAYXBXfnA2glQxyq5K0an/5QdK1oTY42fjY+QTpQGNrQk8i0yIIR6cWgosF+wwsaTU\n" +
            "+Ko2CLw4ZKCFq0WiyKiHuKBTHuqLNw7QBoOC9eKxacUBMJGzeDg2ose3cmkYyuLL/A1EwMwT+eXK\n" +
            "STLVN/5F8JKXHBRrCzHIr8ECQQDOXzgcW3kfG2jaqEiUHO4YjtI9nOaGa+2jWvYZuVRog1RCOCOj\n" +
            "p5TV2u2MiRJ992mP6sRYZN+Qn5gDaA3BhDvxAkEAqvUAxgzCKimIxQWQh6Xet/fN+ZXJHmBX6kJb\n" +
            "q8iCUf1RYeVPdZ9D23QXAtafsdn6xeafnkgDOC/DD5DSHJ+t1wJBAJqx2be4AdUFkNXHK5CLFxcl\n" +
            "iAdTY6IDqUC4YJ3rxJALUc/JkT2N0w1zbHnaDhiKq4CL9N5lzwfz+dkj2Jvk6aECQQCPbySJBmda\n" +
            "DKMN+w86YHavD6CniX7Gl7rrd2WGiaKdu9YuNsEmRMwgMhSkcwJlrCf1JvxBRtY8rAYS50UCcw7d\n" +
            "AkAVJGz4cmVt7mVoLVDYy6kI2P8CnskGqM4tHe5XiQGC927Ja98DKGBuLHxcg5DbZEr6aUB4Y8OO\n" +
            "aMBTTU8rwWdf";

    static {
        Key[] keys = generateKey(privateKeyStr, publicKeyStr);
        privateKey = keys[0];
        publicKey = keys[1];
    }

    //更换密钥用
    private void genKeyPair() {
        SecureRandom sr = new SecureRandom();
        KeyPairGenerator kpg = null;
        try {
            kpg = KeyPairGenerator.getInstance(ALGORITHM);
        } catch (NoSuchAlgorithmException e) {
            //ignore
        }
        kpg.initialize(KEYSIZE, sr);
        KeyPair kp = kpg.generateKeyPair();
        Key publicKey = kp.getPublic();
        Key privateKey = kp.getPrivate();
        LOGGER.info("public key str: " + genKeyStr(publicKey));
        LOGGER.info("private key str: " + genKeyStr(privateKey));
    }

    /**
     * 解密
     *
     * @param ciperText 密文
     * @return 明文
     */
    public static String decrypt(String ciperText) {
        try {
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            cipher.init(Cipher.DECRYPT_MODE, privateKey);
            BASE64Decoder decoder = new BASE64Decoder();
            byte[] b1 = decoder.decodeBuffer(ciperText);
            /** 执行解密操作 */
            byte[] b = cipher.doFinal(b1);
            return new String(b);
        } catch (Exception e) {
            LOGGER.error("解密出错,密文为: {}", ciperText, e);
        }
        return null;
    }

    /**
     * 加密
     *
     * @param plainText 明文
     * @return 密文
     */
    public static String encrypt(String plainText) {
        try {
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            cipher.init(Cipher.ENCRYPT_MODE, publicKey);
            byte[] b = plainText.getBytes();
            /** 执行加密操作 */
            byte[] b1 = cipher.doFinal(b);
            BASE64Encoder encoder = new BASE64Encoder();
            return encoder.encode(b1).replaceAll("\r|\n", "");
        } catch (Exception e) {
            LOGGER.error("加密出错,明文为: {}", plainText, e);
        }
        return null;
    }

    //根据保存的key获得公钥和私钥
    private static Key[] generateKey(String priKey, String pubKey) {
        try {
            PKCS8EncodedKeySpec priSpec = new PKCS8EncodedKeySpec(new BASE64Decoder().decodeBuffer(priKey));
            X509EncodedKeySpec pubSpec = new X509EncodedKeySpec(new BASE64Decoder().decodeBuffer(pubKey));
            KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM);
            PrivateKey privateKey = keyFactory.generatePrivate(priSpec);
            PublicKey publicKey = keyFactory.generatePublic(pubSpec);
            return new Key[]{privateKey, publicKey};
        } catch (Exception e) {
            LOGGER.error("生成密钥出错, private key = {}, public key = {}", priKey, pubKey, e);
        }
        return null;
    }

    //根据公钥和私钥生成相应的字符串
    private static String genKeyStr(Key key) {
        return new BASE64Encoder().encode(key.getEncoded());
    }

    public static void main(String[] args) throws InvalidKeySpecException, NoSuchAlgorithmException, IOException {
        String encrypt = RSAUtil.encrypt("lijie.xin");
        String decrypt = RSAUtil.decrypt(encrypt);
        System.out.println("enc: " + encrypt);
        System.out.println("dec: " + decrypt);

    }

}


}

